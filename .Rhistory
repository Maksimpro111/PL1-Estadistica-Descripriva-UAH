#| label: setup
# Librerías y opciones
author <- "Alumno"
suppressPackageStartupMessages({
library(tidyverse)
library(readr)
library(janitor)
library(lubridate)
library(ggthemes)
library(patchwork)
library(broom)
library(moments)
library(DescTools)
})
source("R/helpers.R")
dir.create("figs", showWarnings = FALSE)
dir.create("outputs", showWarnings = FALSE)
western <- western_countries
eastern <- eastern_countries
accession <- accession_year_tbl
# función para leer GDP.csv desde data/ o raíz
read_gdp_csv <- function() {
path1 <- file.path("data", "GDP.csv")
path2 <- "GDP.csv"
path <- if (file.exists(path1)) path1 else path2
readr::read_csv(path, show_col_types = FALSE)
}
# función para leer DESEMPLEO.csv desde data/ o raíz
read_lfs_csv <- function() {
path1 <- file.path("data", "DESEMPLEO.csv")
path2 <- "DESEMPLEO.csv"
path <- if (file.exists(path1)) path1 else path2
readr::read_csv(path, show_col_types = FALSE)
}
#| label: load-gdp
# PIB: real GDP per capita (Eurostat TIPSNA40)
gdp_raw <- read_gdp_csv()
# Estandarizar columnas
stopifnot(all(c("geo","TIME_PERIOD","OBS_VALUE") %in% names(gdp_raw)))
gdp <- gdp_raw %>%
transmute(
geo = geo,
year = as.integer(TIME_PERIOD),
gdp_pc = suppressWarnings(as.numeric(OBS_VALUE))
) %>%
filter(year >= 1998, year <= 2019,
geo %in% c(western, eastern)) %>%
mutate(
group = assign_group(geo),
phase = assign_phase(geo, year)
) %>%
arrange(geo, year)
# Métricas de crecimiento
gdp_growth <- calc_growth_metrics(gdp, by_cols = c("geo"), value_col = gdp_pc)
# Crecimiento acumulado y promedio anual 1998-2019 por país
gdp_cum <- cum_and_avg_growth(gdp, by_cols = c("geo"), value_col = gdp_pc)
#| label: setup
# Librerías y opciones
author <- "Alumno"
suppressPackageStartupMessages({
library(tidyverse)
library(readr)
library(janitor)
library(lubridate)
library(ggthemes)
library(patchwork)
library(broom)
library(moments)
library(DescTools)
})
source("R/helpers.R")
dir.create("figs", showWarnings = FALSE)
dir.create("outputs", showWarnings = FALSE)
western <- western_countries
eastern <- eastern_countries
accession <- accession_year_tbl
# función para leer GDP.csv desde data/ o raíz
read_gdp_csv <- function() {
path1 <- file.path("data", "GDP.csv")
path2 <- "GDP.csv"
path <- if (file.exists(path1)) path1 else path2
readr::read_csv(path, show_col_types = FALSE)
}
# función para leer DESEMPLEO.csv desde data/ o raíz
read_lfs_csv <- function() {
path1 <- file.path("data", "DESEMPLEO.csv")
path2 <- "DESEMPLEO.csv"
path <- if (file.exists(path1)) path1 else path2
readr::read_csv(path, show_col_types = FALSE)
}
#| label: load-gdp
# PIB: real GDP per capita (Eurostat TIPSNA40)
gdp_raw <- read_gdp_csv()
# Estandarizar columnas
stopifnot(all(c("geo","TIME_PERIOD","OBS_VALUE") %in% names(gdp_raw)))
gdp <- gdp_raw %>%
transmute(
geo = geo,
year = as.integer(TIME_PERIOD),
gdp_pc = suppressWarnings(as.numeric(OBS_VALUE))
) %>%
filter(year >= 1998, year <= 2019,
geo %in% c(western, eastern)) %>%
mutate(
group = assign_group(geo),
phase = assign_phase(geo, year)
) %>%
arrange(geo, year)
# Métricas de crecimiento
gdp_growth <- calc_growth_metrics(gdp, by_cols = c("geo"), value_col = gdp_pc)
# Crecimiento acumulado y promedio anual 1998-2019 por país
gdp_cum <- cum_and_avg_growth(gdp, by_cols = c("geo"), value_col = gdp_pc)
# Merge para tener group en gdp_cum
gdp_cum <- gdp_cum %>% left_join(gdp %>% distinct(geo, group), by = "geo")
#| label: stats-gdp
# Resúmenes por grupo y fase
stats_gdp_group_phase <- gdp_growth %>%
filter(!is.na(gdp_pc)) %>%
group_by(group, phase) %>%
reframe(
summarize_stats(cur_data(), "gdp_pc"),
.groups = "drop"
)
# Tabla de frecuencias de gdp_pc por grupo
freq_gdp_by_group <- gdp_growth %>%
group_by(group) %>%
reframe(make_freq_table(gdp_pc, bins = 10), .groups = "drop")
# Tabla de frecuencias de crecimiento interanual por grupo
freq_growth_by_group <- gdp_growth %>%
group_by(group) %>%
reframe(make_freq_table(yoy_growth, bins = 10), .groups = "drop")
# Contingencias fase x grupo (número de observaciones)
cont_phase_group <- gdp_growth %>% drop_na(phase, group) %>%
tabyl(phase, group) %>% adorn_totals("both") %>% adorn_percentages("row")
# Exportar
write_csv(stats_gdp_group_phase, file.path("outputs","stats_gdp_group_phase.csv"))
write_csv(freq_gdp_by_group, file.path("outputs","freq_gdp_by_group.csv"))
write_csv(freq_growth_by_group, file.path("outputs","freq_growth_by_group.csv"))
write_csv(cont_phase_group, file.path("outputs","cont_phase_group.csv"))
#| label: plots-gdp
# Histogramas de gdp_pc por grupo
p_hist_gdp <- gdp_growth %>%
ggplot(aes(x = gdp_pc, fill = group)) +
geom_histogram(color = "white", bins = 30, alpha = 0.75) +
facet_wrap(~ group, scales = "free_y") +
theme_minimal() + theme(legend.position = "none") +
labs(title = "PIB per cápita: Histogramas por grupo", x = "PIB pc (CLV2015 EUR)", y = "Frecuencia")
ggsave(file.path("figs","hist_gdp_by_group.png"), p_hist_gdp, width = 9, height = 5, dpi = 150)
# Boxplots de gdp_pc por grupo y fase
p_box_gdp <- gdp_growth %>%
filter(!is.na(phase)) %>%
ggplot(aes(x = interaction(group, phase), y = gdp_pc, fill = group)) +
geom_boxplot(alpha = 0.7) +
theme_minimal() +
labs(title = "PIB pc: Boxplots por grupo y fase", x = "Grupo-Fase", y = "PIB pc")
ggsave(file.path("figs","box_gdp_group_phase.png"), p_box_gdp, width = 9, height = 5, dpi = 150)
# Series temporales (promedio por grupo)
series_gdp <- gdp_growth %>%
group_by(group, year) %>%
summarize(mean_gdp = mean(gdp_pc, na.rm = TRUE), .groups = "drop")
p_ts_gdp <- series_gdp %>%
ggplot(aes(x = year, y = mean_gdp, color = group)) +
geom_line(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(1998, 2019, by = 3)) +
labs(title = "PIB pc medio por grupo (1998–2019)", x = "Año", y = "PIB pc medio")
ggsave(file.path("figs","ts_gdp_mean_by_group.png"), p_ts_gdp, width = 9, height = 5, dpi = 150)
#| label: load-activity
# Leer DESEMPLEO.csv (en realidad actividad/empleo LFS)
lfs_raw <- read_lfs_csv()
# Columnas principales esperadas
stopifnot(all(c("geo","TIME_PERIOD","OBS_VALUE") %in% names(lfs_raw)))
lfs_tidy <- lfs_raw %>%
clean_names() %>%
# renombre conservador si los nombres ya están en minúsculas
rename(
geo = geo,
year = time_period,
value = obs_value
) %>%
mutate(
year = as.integer(year),
value = suppressWarnings(as.numeric(value))
) %>%
filter(year >= 1998, year <= 2019,
geo %in% c(western, eastern))
# Filtrar a indicador ACT (personas activas) y unidad PC_POP (porcentaje población)
# Si no existen, mantener lo que haya y avisar mediante fallback
has_indic <- "indic_em" %in% names(lfs_tidy)
has_unit <- "unit" %in% names(lfs_tidy)
has_age <- "age" %in% names(lfs_tidy)
has_sex <- "sex" %in% names(lfs_tidy)
lfs_act <- lfs_tidy %>%
{ if (has_indic) filter(., indic_em == "ACT") else . } %>%
{ if (has_unit) filter(., unit %in% c("PC_POP","PC_ACT")) else . } %>%
{ if (has_age && any(.$age == "Y15-74")) filter(., age == "Y15-74") else . } %>%
{ if (has_sex && any(.$sex == "T")) filter(., sex == "T") else . }
# Si no hay sexo total, promediar por sexo disponible (aprox.)
if (has_sex && !any(lfs_act$sex == "T", na.rm = TRUE)) {
lfs_act <- lfs_act %>% group_by(geo, year) %>% summarize(value = mean(value, na.rm = TRUE), .groups = "drop")
} else {
lfs_act <- lfs_act %>% select(geo, year, value)
}
activity <- lfs_act %>%
mutate(
group = assign_group(geo),
phase = assign_phase(geo, year),
activity_rate = value
) %>% arrange(geo, year)
#| label: stats-activity
stats_activity_group_phase <- activity %>%
group_by(group, phase) %>%
reframe(
summarize_stats(cur_data(), "activity_rate"),
.groups = "drop"
)
freq_activity_by_group <- activity %>%
group_by(group) %>%
reframe(make_freq_table(activity_rate, bins = 10), .groups = "drop")
cont_activity_phase_group <- activity %>% drop_na(phase, group) %>%
tabyl(phase, group) %>% adorn_totals("both") %>% adorn_percentages("row")
write_csv(stats_activity_group_phase, file.path("outputs","stats_activity_group_phase.csv"))
write_csv(freq_activity_by_group, file.path("outputs","freq_activity_by_group.csv"))
write_csv(cont_activity_phase_group, file.path("outputs","cont_activity_phase_group.csv"))
#| label: plots-activity
p_hist_activity <- activity %>%
ggplot(aes(x = activity_rate, fill = group)) +
geom_histogram(color = "white", bins = 30, alpha = 0.8) +
facet_wrap(~ group, scales = "free_y") +
theme_minimal() + theme(legend.position = "none") +
labs(title = "Actividad (% población): Histogramas por grupo", x = "Tasa de actividad (%)", y = "Frecuencia")
ggsave(file.path("figs","hist_activity_by_group.png"), p_hist_activity, width = 9, height = 5, dpi = 150)
p_box_activity <- activity %>%
filter(!is.na(phase)) %>%
ggplot(aes(x = interaction(group, phase), y = activity_rate, fill = group)) +
geom_boxplot(alpha = 0.7) +
theme_minimal() +
labs(title = "Actividad: Boxplots por grupo y fase", x = "Grupo-Fase", y = "%")
ggsave(file.path("figs","box_activity_group_phase.png"), p_box_activity, width = 9, height = 5, dpi = 150)
series_activity <- activity %>% group_by(group, year) %>%
summarize(mean_activity = mean(activity_rate, na.rm = TRUE), .groups = "drop")
p_ts_activity <- series_activity %>%
ggplot(aes(x = year, y = mean_activity, color = group)) +
geom_line(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(1998, 2019, by = 3)) +
labs(title = "Actividad media por grupo (1998–2019)", x = "Año", y = "%")
ggsave(file.path("figs","ts_activity_mean_by_group.png"), p_ts_activity, width = 9, height = 5, dpi = 150)
#| label: corr
both <- gdp_growth %>% select(geo, year, group, phase, gdp_pc) %>%
inner_join(activity %>% select(geo, year, activity_rate), by = c("geo","year"))
# Pearson global, por grupo y por fase
corr_global <- cor(both$gdp_pc, both$activity_rate, use = "complete.obs")
corr_by_group <- both %>% group_by(group) %>%
summarize(r = cor(gdp_pc, activity_rate, use = "complete.obs"), .groups = "drop")
corr_by_phase <- both %>% group_by(phase) %>%
summarize(r = cor(gdp_pc, activity_rate, use = "complete.obs"), .groups = "drop")
write_csv(corr_by_group, file.path("outputs","corr_pib_activity_by_group.csv"))
write_csv(corr_by_phase, file.path("outputs","corr_pib_activity_by_phase.csv"))
p_scatter <- both %>%
ggplot(aes(x = gdp_pc, y = activity_rate, color = group)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = paste0("PIB pc vs Actividad (r global = ", round(corr_global,3), ")"),
x = "PIB per cápita (CLV2015 EUR)", y = "Actividad (% población)")
ggsave(file.path("figs","scatter_gdp_activity.png"), p_scatter, width = 8, height = 6, dpi = 150)
